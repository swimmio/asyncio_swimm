{
    "id": "OJmOIn8kXdyxldLUQxGk",
    "name": "Small Gathering",
    "file_version": "2.0.1",
    "meta": {
        "app_version": "0.4.4-0",
        "file_blobs": {
            "src/small_gathering.py": "cac722bf4c85a316c377824a947778d54ac2def2"
        }
    },
    "content": [
        {
            "type": "text",
            "text": "After learning how to run an asynchronous coroutine, let's learn how to really leverage the _asynchronous_ part of it and run several of them concurrently!\n\n## Recommended References\n* https://docs.python.org/3.8/library/asyncio-task.html#running-tasks-concurrently -> The official docs.\n* https://realpython.com/async-io-python/#async-io-explained -> A nice metaphor to what executing tasks asynchronously actually means."
        },
        {
            "type": "snippet",
            "path": "src/small_gathering.py",
            "comments": [],
            "firstLineNumber": 17,
            "lines": [
                "     :param announcements: The number of `announce` coroutines to instantiate.",
                "     :type announcements: int",
                "     \"\"\"",
                "*    await asyncio.gather(*[announce() for _ in range(announcements)])",
                "+    pass",
                " ",
                " ",
                " def runner(announcements: int) -> None:"
            ]
        },
        {
            "type": "text",
            "text": "In this unit we've learned about the use of `asyncio.gather` and how it allows us to await on several coroutines at the same time, allowing them to run concurrently!\n\nIf you're still unsure about the difference between concurrency and parallelism, read back the recommended references. Concurrent execution is a hard concept to grasp at first, but after reading and practicing it will come as second nature!\n\n## Side note\n\nThe current solution uses two Python \"tricks\":\n\n- The `*` operator, used to unpack our created list of coroutines and pass them as individual arguments to `asyncio.gather`.\n- The `_` special variable name, used as the defacto temporary variable specifier.\n\nIt's important to note that these tricks aren't necessary to solve this unit, but they are nice to know!"
        }
    ],
    "task": {
        "dod": "Make the tests pass.",
        "hints": [
            "Read the references, there's an `asyncio` function that allows you to run and await on a group of tasks together."
        ],
        "tests": [
            "python -m pytest tests/test_small_gathering.py"
        ]
    }
}
