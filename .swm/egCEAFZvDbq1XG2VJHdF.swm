{
    "id": "egCEAFZvDbq1XG2VJHdF",
    "name": "Dice Roller",
    "file_version": "2.0.1",
    "meta": {
        "app_version": "0.4.4-0",
        "file_blobs": {
            "src/dice_roller.py": "f4b854af291899979d79c99125b21344c262c985"
        }
    },
    "content": [
        {
            "type": "text",
            "text": "Did you know that you can get values back from our coroutines?\nIn this unit we'll learn all about how to do just that.\n\n## Recommended References\n* https://docs.python.org/3.9/library/asyncio-task.html#running-tasks-concurrently"
        },
        {
            "type": "snippet",
            "path": "src/dice_roller.py",
            "comments": [],
            "firstLineNumber": 1,
            "lines": [
                " import asyncio",
                "*import random",
                " import typing",
                " ",
                " SLEEP_TIME = 0.2"
            ]
        },
        {
            "type": "snippet",
            "path": "src/dice_roller.py",
            "comments": [],
            "firstLineNumber": 16,
            "lines": [
                "     :return: The target number.",
                "     :rtype: int",
                "     \"\"\"",
                "*    while roll := random.randint(1, 6):",
                "+    pass",
                "*        print(f'{target} is rolling the dice')",
                "*        await asyncio.sleep(SLEEP_TIME)",
                "*        print(f'{target} rolled a {roll}')",
                "*        if roll == target:",
                "*            print(f'{target} is out!')",
                "*            return roll",
                " ",
                " ",
                " async def gatherer() -> typing.Container[int]:"
            ]
        },
        {
            "type": "snippet",
            "path": "src/dice_roller.py",
            "comments": [],
            "firstLineNumber": 33,
            "lines": [
                "     :return: List of every coroutine result.",
                "     :rtype: typing.Container[int]",
                "     \"\"\"",
                "*    return await asyncio.gather(*[dice_roller(i) for i in range(1, 7)])",
                "+    pass",
                " ",
                " ",
                " def runner() -> typing.Container[int]:"
            ]
        },
        {
            "type": "text",
            "text": "In this unit we've learned the surprising truth about coroutines: they're still functions! And just like functions, they can return values!\n\nOther than that, we saw a good demonstration to how concurrent execution worked: notice how despite them sleeping, the time it took for each new \"roll\" of the dice wasn't `SLEEP_TIME * 6` but instead `SLEEP_TIME`, as each of the calls to `asyncio.sleep` didn't block the entire function but instead relinquished control back to the event loop.\n\nIt's also worth mentioning something that might go unnoticed: the list of values gathered by `asyncio.gather` is ordered by _the order of the coroutines passed into it_. This mean you can alway guarantee you know what return value belongs to each coroutine (something that isn't always as trivial with other parallel execution methods)."
        }
    ],
    "task": {
        "dod": "Make the tests pass.",
        "hints": [
            "Despite running in their own special way, async functions behave much like... Well, functions."
        ],
        "tests": [
            "python -m pytest tests/test_dice_roller.py"
        ]
    }
}
