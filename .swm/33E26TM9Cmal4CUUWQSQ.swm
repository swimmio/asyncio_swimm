{
    "id": "33E26TM9Cmal4CUUWQSQ",
    "name": "File Cabinet",
    "file_version": "2.0.1",
    "meta": {
        "app_version": "0.4.4-0",
        "file_blobs": {
            "src/file_cabinet.py": "498e832ada655482b3c507a3926e4292f080acf2"
        }
    },
    "content": [
        {
            "type": "text",
            "text": "After dealing a bit with unnecessary `sleep`y calls, let's test our newfound async skills to practical use.\n\nIn this unit we'll learn about `aiofiles`, an `asyncio` compatible package to deal with file operations.\n\n## Recommended References\n* https://github.com/Tinche/aiofiles#readme -> The package's `README`.\n* https://docs.python.org/3/reference/datamodel.html#asynchronous-context-managers -> A piece of the Python data model talking about what is an asynchronous context manager."
        },
        {
            "type": "snippet",
            "path": "src/file_cabinet.py",
            "comments": [],
            "firstLineNumber": 13,
            "lines": [
                "     :param content: Content to write to the file.",
                "     :type content: str",
                "     \"\"\"",
                "*    async with aiofiles.open(path, 'w') as f:",
                "+    pass",
                "*        await f.write(content)",
                " ",
                " ",
                " async def read_file(path: Path) -> typing.List[str]:"
            ]
        },
        {
            "type": "snippet",
            "path": "src/file_cabinet.py",
            "comments": [],
            "firstLineNumber": 26,
            "lines": [
                "     :return: Contents of the file in `path`.",
                "     :rtype: typing.List[str]",
                "     \"\"\"",
                "*    async with aiofiles.open(path) as f:",
                "+    pass",
                "*        return await f.readlines()",
                " ",
                " ",
                " async def copy_every_odd_line(read_path: Path, write_path: Path) -> None:"
            ]
        },
        {
            "type": "snippet",
            "path": "src/file_cabinet.py",
            "comments": [],
            "firstLineNumber": 40,
            "lines": [
                "     :param write_path: Valid path on the filesystem to write to.",
                "     :type write_path: Path",
                "     \"\"\"",
                "*    read_lines = await read_file(read_path)",
                "+    pass",
                "*    write_buffer = ''.join(read_lines[::2])",
                "*    await write_file(write_path, write_buffer)"
            ]
        },
        {
            "type": "text",
            "text": "In this unit we've got our first \"practical real world experience\" with `asyncio`. One of the major I/O pain points we usually have is filesystem operations, which is precisely where `aiofiles` can help us out!\n\nLeveraging the power of async functions to make all of our operations against the filesystem concurrent saves us precious time when we want our system to be as performant as possible and avoid any blocking operations. "
        }
    ],
    "task": {
        "dod": "Make the tests pass.",
        "hints": [
            "Look at the package's README file, there you can see the entire API it exposes. Notice how similar it is to how we normally deal with files?",
            "Several Pythonic constructs and statements behave a bit differently when `async` is involved. Look for `async with`."
        ],
        "tests": [
            "python -m pytest tests/test_file_cabinet.py"
        ]
    }
}
